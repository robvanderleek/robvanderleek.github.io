{"version":3,"sources":["static/media/me-2020-1200x1597.jpg","App.style.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","styled","div","Contact","Info","App","src","profile_picture","alt","height","href","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,+C,6nCCEpC,IAAMC,EAAOC,IAAOC,IAAV,KAYJC,EAAUF,IAAOC,IAAV,KAiBPE,EAAOH,IAAOC,IAAV,K,iBCDFG,MAzBf,WACI,OACI,kBAACL,EAAD,KACI,kBAACG,EAAD,KACI,yBAAKG,IAAKC,IAAiBC,IAAI,aAAaC,OAAO,QACnD,gDACA,2BAAG,uBAAGC,KAAK,kCAAR,4BACH,0BAAMC,UAAU,SACR,uBAAGD,KAAK,qCAAoC,uBAAGC,UAAU,oBACzD,uBAAGD,KAAK,yDAAwD,uBAAGC,UAAU,qBAC7E,uBAAGD,KAAK,qCAAoC,uBAAGC,UAAU,mBACzD,uBAAGD,KAAK,oCAAmC,uBAAGC,UAAU,qBAGpE,kBAACP,EAAD,KACI,qCACA,qVCTIQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD8H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9867b2b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me-2020-1200x1597.7f33f379.jpg\";","import styled from 'styled-components';\n\nexport const Main = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    \n    @media (min-width: 1060px) {\n        height: 100%;\n        flex-direction: row;\n    }\n`;\n\nexport const Contact = styled.div`\n    text-align: center;\n    & > p {\n        font-size: 1.1rem;\n        padding-bottom: 10px;\n        margin: 0;\n    }\n    & > h2 {\n        font-size: 1.7rem;\n        margin-bottom: 10px;\n    }\n    & > .icons > a {\n        font-size: 1.5rem;\n        padding: 10px;\n    }\n`;\n\nexport const Info = styled.div`\n    width: 40%;\n    & > h2 {\n        font-size: 1.7rem;\n        margin-bottom: 10px;\n    }\n\n    & > p {\n        font-size: 1.1rem;\n        padding-bottom: 10px;\n        margin: 0;\n    }\n\n    & > a {\n        display: block;\n        padding: 5px;\n        padding-left: 0;\n    }\n`;","import React from 'react';\nimport './App.css';\nimport {Contact, Info, Main} from \"./App.style\";\nimport profile_picture from './static/media/me-2020-1200x1597.jpg';\n\nfunction App() {\n    return (\n        <Main>\n            <Contact>\n                <img src={profile_picture} alt=\"This is me\" height=\"375\"/>\n                <h2>Rob van der Leek</h2>\n                <p><a href=\"mailto:robvanderleek@gmail.com\">robvanderleek@gmail.com</a></p>\n                <span className=\"icons\">\n                        <a href=\"https://twitter.com/robvanderleek\"><i className=\"fab fa-twitter\"/></a>\n                        <a href=\"https://www.linkedin.com/in/rob-van-der-leek-66596962\"><i className=\"fab fa-linkedin\"/></a>\n                        <a href=\"https://medium.com/@robvanderleek\"><i className=\"fab fa-medium\"/></a>\n                        <a href=\"https://github.com/robvanderleek\"><i className=\"fab fa-github\"/></a>\n                    </span>\n            </Contact>\n            <Info>\n                <h2>About</h2>\n                <p>Software engineer. Lives and works in The Netherlands. Studied Computer Science at Delft\n                    University of Technology. Currently working at a Computer Vision Machine Learning startup\n                    in Amsterdam. Passion for software quality and software minimalism. I've done some of my best\n                    development work under the shower.</p>\n            </Info>\n        </Main>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}